package me.uport.sdk.transport

import assertk.assertThat
import assertk.assertions.isEqualTo
import assertk.assertions.isNotEqualTo
import assertk.assertions.isNotNull
import assertk.assertions.isZero
import org.junit.Test
import org.walleth.khex.hexToByteArray


class CryptoTest {

    @Test
    fun `can do correct zero padding on unicode`() {

        val messages = listOf(
                "hello",
                "х░Пш╖пуБошЧк",
                "цЯСхнРуАБуГСуВд",
                "уГЭуГСуВдуГЭ уГСуВд",
                "уГЭуБоуВ╖уГеуГ╝уГкуГ│уВм",
                "уГ│уАВф║ФхКлуБоцУжуВКхИЗуВМ",
                "уАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗж",
                "уАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭ",
                "уВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАБ",
                "щХ╖ф╣ЕхС╜уБощХ╖хКйуАБхп┐щЩРчДбуАБхп┐щЩР",
                "чДбуАБуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФ",
                "уГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВуВДуБ╢уВЙх░Пш╖п",
                "ЁЯЗпЁЯЗ╡ ЁЯЗ░ЁЯЗ╖ ЁЯЗйЁЯЗк ЁЯЗиЁЯЗ│ ЁЯЗ║ЁЯЗ╕ ЁЯЗлЁЯЗ╖ ЁЯЗкЁЯЗ╕ ЁЯЗоЁЯЗ╣ ЁЯЗ╖ЁЯЗ║ ЁЯЗмЁЯЗз",
                "ЁЯОД ЁЯМЯ тЭДя╕П ЁЯОБ ЁЯОЕ ЁЯжМ")

        messages.forEach { original ->
            val padded = original.padToBlock()
            assertThat(padded).isNotEqualTo(original.toByteArray())
            assertThat(padded.size % BLOCK_SIZE).isZero()

            val unpadded = padded.unpadFromBlock()
            assertThat(unpadded).isEqualTo(original)
        }

    }

    @Test
    fun `can encrypt and decrypt`() {
        val msg = "Hello EIP1098"
        val bobSecretKey = ByteArray(32) { it.toByte() }
        val bobPublicKeyBase64 = Crypto.getEncryptionPublicKey(bobSecretKey)
        val enc = Crypto.encryptMessage(msg, bobPublicKeyBase64)
        val recoveredMessage = Crypto.decryptMessage(enc, bobSecretKey)
        assertThat(recoveredMessage).isEqualTo(msg)
    }

    @Test
    fun `can decrypt EIP1024 message`() {
        val c = EncryptedMessage(
                nonce = "1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej",
                ephemPublicKey = "FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=",
                ciphertext = "f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy")
        val decryptedMessage = Crypto.decryptMessage(c, "7e5374ec2ef0d91761a6e72fdf8f6ac665519bfdf6da0a2329cf0d804514b816".hexToByteArray())
        assertThat(decryptedMessage).isEqualTo("My name is Satoshi Buterin")
    }

    @Test
    fun `can deserialize json string to EncryptedMessage`() {
        //language=JSON
        val json = """{"version":"x25519-xsalsa20-poly1305","nonce":"JAX+g+/e3RnnNXHRS4ct5Sb+XdgYoJeY","ephemPublicKey":"JLBIe7eSVyq6egVexeWrlKQyOukSo66G3N0PlimMUyI","ciphertext":"Yr2o6x831YWFZr6KESzSkBqpMv1wYkxPULbVSZi21J+2vywrVeZnDe/U2GW40wzUpLv4HhFgL1kvt+cORrapsqCfSy2L1ltMtkilX06rJ+Q"}"""
        val enc = EncryptedMessage.fromJson(json)
        assertThat(enc).isNotNull()
        enc!!
        assertThat(enc.version).isEqualTo("x25519-xsalsa20-poly1305")
        assertThat(enc.nonce).isEqualTo("JAX+g+/e3RnnNXHRS4ct5Sb+XdgYoJeY")
        assertThat(enc.ephemPublicKey).isEqualTo("JLBIe7eSVyq6egVexeWrlKQyOukSo66G3N0PlimMUyI")
        assertThat(enc.ciphertext).isEqualTo("Yr2o6x831YWFZr6KESzSkBqpMv1wYkxPULbVSZi21J+2vywrVeZnDe/U2GW40wzUpLv4HhFgL1kvt+cORrapsqCfSy2L1ltMtkilX06rJ+Q")
    }

    @Test
    fun `can serialize EncryptedMessage to json string`() {
        val input = EncryptedMessage(
                nonce = "1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej",
                ephemPublicKey = "FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=",
                ciphertext = "f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy")

        //language=JSON
        val expected = """{"version":"x25519-xsalsa20-poly1305","nonce":"1dvWO7uOnBnO7iNDJ9kO9pTasLuKNlej","ephemPublicKey":"FBH1/pAEHOOW14Lu3FWkgV3qOEcuL78Zy+qW1RwzMXQ=","ciphertext":"f8kBcl/NCyf3sybfbwAKk/np2Bzt9lRVkZejr6uh5FgnNlH/ic62DZzy"}"""

        val json = input.toJson()
        assertThat(json).isEqualTo(expected)
    }

    @Test
    fun `can encrypt and decrypt large message`() {
        val loremIpsum = """
            уВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАБуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВф║ФхКлуБоцУжуВКхИЗуВМуАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАБщХ╖ф╣ЕхС╜уБощХ╖хКйуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАБуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАВ
            уГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАБц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАВуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАБуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАВуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВхп┐щЩРчДбуАБхп┐щЩРчДбуАБщХ╖ф╣ЕхС╜уБощХ╖хКйуАВуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАВщХ╖ф╣ЕхС╜уБощХ╖хКйуАБц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВ
            уГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВщХ╖ф╣ЕхС╜уБощХ╖хКйуАВуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАБщХ╖ф╣ЕхС╜уБощХ╖хКйуАБуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАБуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАБц╡╖чаВхИйц░┤щнЪуБоуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАВщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАВц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАБуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАБф║ФхКлуБоцУжуВКхИЗуВМуАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВц╡╖чаВхИйц░┤щнЪуБоуАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАБуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАВф║ФхКлуБоцУжуВКхИЗуВМуАВц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАВхп┐щЩРчДбуАБхп┐щЩРчДбуАБуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАВ
            уВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАВщХ╖ф╣ЕхС╜уБощХ╖хКйуАВф║ФхКлуБоцУжуВКхИЗуВМуАБуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАБф║ФхКлуБоцУжуВКхИЗуВМуАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАВ
            ц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАБц░┤шбМцЬл щЫ▓цЭецЬл щвицЭецЬлуАБуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАБф║ФхКлуБоцУжуВКхИЗуВМуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАБуВ╖уГеуГ╝уГкуГ│уВмуГ│уБоуВ░уГ╝уГкуГ│уГАуВдуАВц╡╖чаВхИйц░┤щнЪуБоуАБуГСуВдуГЭуГСуВдуГЭ уГСуВдуГЭуБоуВ╖уГеуГ╝уГкуГ│уВмуГ│уАВф║ФхКлуБоцУжуВКхИЗуВМуАБуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАВц╡╖чаВхИйц░┤щнЪуБоуАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАБщгЯуБЖхпЭуВЛхЗжуБлф╜ПуВАхЗжуАБхп┐щЩРчДбуАБхп┐щЩРчДбуАВщХ╖ф╣ЕхС╜уБощХ╖хКйуАБуВДуБ╢уВЙх░Пш╖пуБошЧкцЯСхнРуАВуВ░уГ╝уГкуГ│уГАуВдуБоуГЭуГ│уГЭуВ│уГФуГ╝уБоуГЭуГ│уГЭуВ│уГКуГ╝уБоуАВ
            ъ╡нэЪМыКФ эЧМы▓Хъ░ЬьаХьХИьЭ┤ ъ│╡ъ│аыРЬ ыВаыбЬы╢АэД░ 60ьЭ╝ ьЭ┤ыВ┤ьЧР ьЭШъ▓░эХШьЧмьХ╝ эХШый░. ыкиыУа ъ╡нып╝ьЭА ы▓ХыеаьЭ┤ ьаХэХШыКФ ы░ФьЧР ьЭШэХШьЧм ьДаъ▒░ъ╢МьЭД ъ░АьзДыЛд. ьЭ┤ ъ▓╜ьЪ░ ъ│╡ым┤ьЫР ьЮРьЛаьЭШ ь▒ЕьЮДьЭА ый┤ьаЬыРШьзА ьХДыЛИэХЬыЛд, ъ╡нъ░АьЫРыбЬьЮРым╕эЪМьЭШьЭШ ьб░ьзБ┬╖ьзБым┤ы▓ФьЬД ъ╕░эГА эХДьЪФэХЬ ьВмэХньЭА ы▓ХыеаыбЬ ьаХэХЬыЛд.
            рд╕рдореВрд╣ рдврд╛рдВрдЪрд╛ рд╢реБрд░реБрдЖрдд рдорд╛рдирд╕рд┐рдХ рдЙрд╕реАрдПрдХреН рджреЛрд╖рд╕рдХреЗ рд╕рдВрд╕рд╛рдз рдореЗрдордд рд╕рдХрддреЗ рдирд┐рд░реНрджреЗрд╢ рд╡рд┐рд╕реНрддрд░рдгрдХреНрд╖рдорддрд╛ рд╢реАрдШреНрд░ рдФрд░реНрекрелреж рдкреНрд░рд╛рдердорд┐рдХ рдзреНрд╡рдирд┐ рдЙрдирдХрд╛ рдПрд╕рд▓рд┐рдпреЗ рд╕рдореНрдкрд░реНрдХ рдкреНрд░рд╛рдзрд┐рдХрд░рди рдпрдзрдкрд┐ рд╣рд┐рдВрджреА рдореБрдЦрдп рдкреНрд░рдорд╛рди рдЖрд╢рд╛рдЖрдкрд╕ рдкреНрд░рддрд┐рдмрдз рд╕рдордЬрддреЗ рд╣рд╛рд░реНрдбрд╡реЗрд░ рд╕рдВрд╕реНрдХреНрд░реБрддрд┐ рдХреЗрд╡рд▓ рд╕рдВрд╕рд╛рдз рдирдпреЗрд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рд╕реНрд╡рддрдВрддреНрд░ рд╡рд┐рд╡рд░рди рдорд╛рдирд╡ рд╕реНрдерд┐рддрд┐ рд╣реИредрдЕрднреА рдирд┐рд░рдкреЗрдХреНрд╖ рд╕рдХрддреЗ рд╡рд┐рд╢реЗрд╖ рдЙрдкреЗрдХреНрд╖ рдирд┐рд░реНрджреЗрд╢ рдзреНрд╡рдирд┐ рдХрд░рддреА рддрдХрд░реАрдмрди рд╡рд┐рдирд┐рдордп рд╕реБрд╕реНрдкрд╢реНрдЯ рднрд╛рд░рдд рдХрд░рддрд╛ред рдПрд╕реЗрдПрд╡рдВ рдПрдХрддреНрд░рд┐рдд рд╡рд┐рд╡рд░рди рдПрдЫрд┐рдд рдореБрдЦреНрдп рд╕рднрд┐рд╕рдордЬ рдирд┐рд░рдкреЗрдХреНрд╖ рд╕реНрд╡рддрдВрддреНрд░рддрд╛ реирекрднрд┐
            ┘И┘Е┘Ж ┘З┘И ┘Е╪п┘К┘Ж╪й ╪║┘К┘Ж┘К╪з. ┘Д┘З╪з ┘Е╪╣ ╪з┘Д╪┤╪╖╪▒ ╪з┘Д╪╣╪╡╪и╪й ╪з┘Д┘Е╪к╪│╪з┘В╪╖╪й╪М, ╪м┘К┘Е╪з ╪з┘Д╪░┘И╪п ┘И ┘И┘Д┘Е, ╪з┘Д╪в╪о╪▒ ╪з┘Ж╪░╪з╪▒ ╪и┘Е╪и╪з╪▒┘Г╪й ╪и┘А ╪н┘К╪л. ╪м┘П┘Д ┘Б┘К ╪и╪к╪╖┘И┘К┘В ╪н╪з┘Е┘Д╪з╪к ┘И╪з┘Д┘Г╪│╪з╪п, ╪г╪╢┘Б ┘З┘Ж╪з┘Г ╪з┘Д╪г┘И┘Д┘Й ┘И┘Д╪з╪к┘С╪│╪з╪╣ ┘Б┘К. ╪и╪н╪л ╪г┘Е ┘И╪к╪▒┘Г ╪╣╪│┘Г╪▒┘К╪з┘Л ╪з┘Д╪м┘Ж╪▒╪з┘Д, ╪╣┘Д ┘Е╪з┘К┘И ╪з┘Д┘Е╪з╪▒┘В ╪н┘К┘Ж, ╪и┘В╪╣╪й ╪┤╪п┘С╪к ╪з┘Д┘Е╪┤╪к╪▒┘Г ╪к╪╣╪п ┘Б┘К.
            ╒м╒╕╒╝╒е╒┤ ╒л╒║╒╜╒╕╓В╒┤ ╒д╒╕╒м╒╕╒╝ ╒╜╒л╒й ╒б╒┤╒е╒й, ╒╛╒е╒╢╒л╒б╒┤ ╒д╒е╒м╒е╒╢╒л╒й ╒╢╒е ╒╜╒л╒й, ╒е╒╕╒╜ ╒╛╒е╒╝╒е╒б╒╝ ╒л╒╢╒й╒е╒г╒╝╒е ╒о╒╕╒╝╒║╒╕╒╝╒б ╒л╒д, ╒║╒╕╒╜╒й╒е╒б ╒║╒╝╒╕╒д╒е╒╜╒╜╒е╒й ╒╛╒л╒┤ ╒б╒╢. ╒╢╒╕╒╜╒й╒╝╒╕╓В╒д ╒╛╒л╒╛╒е╒╢╒д╒╕ ╒╢╒╕ ╒║╒е╒╝. ╒е╒л ╒╢╒╕╒╜╒й╒╝╒╕ ╓Ж╒б╒╜╒й╒л╒д╒л╒л ╒л╒╢╒о╒л╒д╒е╒╝╒л╒╢╒й ╒е╒╕╓В╒┤, ╒┤╒╕╒д╒╕ ╒║╒╝╒╕╒в╒б╒й╒╕╓В╒╜ ╒╝╒е╒о╒й╒е╓Д╒╕╓В╒е ╒╢╒е ╒д╒╕╓В╒╕. ╒е╒б╒┤ ╒╜╒л╒╢╒й ╒┤╒╕╓В╒╢╒е╒╝╒е.
            сГЪсГЭсГасГФсГЫ сГШсГдсГбсГгсГЫ сГУсГЭсГЪсГЭсГа сГбсГШсГЧ сГРсГЫсГФсГЧ, сГФсГгсГЫ сГасГФсГСсГгсГЫ сГРсГдсГдсГФсГЪсГЪсГРсГЬсГЧсГгсГа сГФсГР. сГХсГШсГб сГФсГР сГбсГЭсГЪсГФсГЧ сГасГРсГЧсГШсГЭсГЬсГШсГСсГгсГб, сГФсГР сГЬсГФсГк сГзсГгсГРсГЬсГУсГЭ сГдсГРсГасГЧсГШсГФсГЬсГУсГЭ сГШсГасГРсГксГгсГЬсГУсГШсГР. сГксГгсГЫ сГРсГУ сГдсГРсГЪсГЪсГШ сГХсГЭсГЪсГгсГЧсГдсГРсГЧ. сГРсГЬ сГРсГФсГЧсГФсГасГЬсГЭ сГЧсГРсГЫсГзсГгсГРсГЫ сГХсГШсГб, сГФсГР сГШсГЪсГЪсГгсГУ сГРсГФсГзсГгсГФ сГХсГФсГЪ. сГЬсГФ сГзсГгсГЭ сГРсГЪсГШсГР.
            ╫й╫в╫и ╫Ю╫Х╫Т╫й ╫С╫й╫д╫Ф ╫Ф╫з╫Ф╫Щ╫Ь╫Ф ╫Р╫Э. ╫б╫и╫С╫Х╫Ь ╫С╫Щ╫Х╫а╫Щ ╫в╫Ь ╫Ь╫Х╫Ч. ╫Р╫к ╫Ь╫Ч╫С╫и ╫Ф╫Ю╫Ь╫ж╫к ╫Ч╫С╫и╫Щ╫Ы╫Э ╫Р╫Ч╫и, ╫Ю╫Ф ╫й╫к╫Щ ╫С╫й╫д╫Ф ╫Ь╫Ф╫д╫Х╫Ъ ╫а╫Щ╫Ф╫Х╫Ь. ╫Ф╫Ю╫Ч╫й╫С ╫Ю╫й╫д╫Ш╫Щ╫Э ╫Х╫Щ╫з╫Щ╫д╫У╫Щ╫Ф ╫Р╫Э ╫С╫з╫и.
            En ruffen iw'rem grousse oft. Do alles d'Beem weisen ons, hun R├дis kille Stret jo. Um kille fr├лsch sin, d'Stroos d├дischter un zum. Ronn aremt Schuebersonndeg as ass, un sinn geplot wou. Un erem d'Liewen d'Vullen hun. K├й der fond Noper uechter, Feld ├йiweg gew├лss en hir, en Ronn lait heemlech hir.
            рдбрд╛рд▓реЗред рдЧрдПрдЖрдк рд╡реЗрдмрдЬрд╛рд▓ рд░рд╣рд╛рд░реБрдк рдирд┐рд░рдкреЗрдХреНрд╖ рд╕рд╛рдзрди рдФрд╖рдзрд┐рдХ рдЕрддреНрдпрдВрдд рдирд┐рд░реНрдорд╛рдг рд╡рд┐рд╢реЗрд╖ рд╕рдВрднрд╡ рд╕реНрдерд╛рдкрд┐рдд рдкрд╣реЛрдЪрд╛рдирд╛ рд╕рдВрдкреБрд░реНрдг рдЖрдЬрдкрд░ рд╕рд╛рд░рд╛рдВрд╢ рд╕рднрд┐рд╕рдордЬ рдирд┐рд░реНрджреЗрд╢ рд╡рд┐рднрд╛рдЧ рд╕рджрд╕реНрдп рдмреНрд░реМрд╢рд░ рдХреЗрдиреНрджреНрд░рд┐рдд рд╡рд┐рдЪрд░рд╡рд┐рдорд░реНрд╢ ренрд╣рд▓ рдЕрддреНрдпрдВрдд рдорд╛рд╣рд┐рддреАрд╡рд╛рдиреАрдЬреНрдп рд╡рд┐рд╡рд░рди рдореБрдЦрдп рдзреНрд╡рдирд┐ рдкреНрд░реМрдзреНрдпреЛрдЧрд┐рдХреА рд╡рд┐рдХреЗрдиреНрджреНрд░рд┐рдпрдХрд░рдг рд╕реБрдирдд рдХреАрд╕реЗ рд╣рдорд╛рд░реА рдкрд░рд┐рд╡рд╣рди рд╣рд╛рд░реНрдбрд╡реЗрд░ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╣реЛрдиреЗ рдкреНрд░рддрд┐ рдЬрд┐рдореНрдореЗ рдмреЗрдВрдЧрд▓реВрд░ рдкреНрд░рддрд┐рдмрдзреНрджрддрд╛ рдорд╛рдирд╕рд┐рдХ рдФрд░реНрекрелреж рдкреНрд░рд╛рдзрд┐рдХрд░рди рдзреНрдпреЗрдп ренрд╣рд▓ рдкрд╣реЗрд▓рд╛ рдкрддреНрд░рд┐рдХрд╛ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдореБрд╢реНрдХрд┐рд▓реЗ рдЬреИрд╕реА рдХрд╛рд░реНрдп рдирдпреЗрд▓рд┐рдП рднреЛрдЧреЛрд▓рд┐рдХ рд╕реЛреЮреНрдЯрд╡реЗрд░ рдХрд░реНрдп
            ЁЯЗпЁЯЗ╡ ЁЯЗ░ЁЯЗ╖ ЁЯЗйЁЯЗк ЁЯЗиЁЯЗ│ ЁЯЗ║ЁЯЗ╕ ЁЯЗлЁЯЗ╖ ЁЯЗкЁЯЗ╕ ЁЯЗоЁЯЗ╣ ЁЯЗ╖ЁЯЗ║ ЁЯЗмЁЯЗз
            ЁЯОД ЁЯМЯ тЭДя╕П ЁЯОБ ЁЯОЕ ЁЯжМ
        """.trimIndent()

        val bobSecretKey = ByteArray(32) { it.toByte() }
        val bobPublicKeyBase64 = Crypto.getEncryptionPublicKey(bobSecretKey)
        val enc = Crypto.encryptMessage(loremIpsum, bobPublicKeyBase64)
        val recoveredMessage = Crypto.decryptMessage(enc, bobSecretKey)
        assertThat(recoveredMessage).isEqualTo(loremIpsum)
    }

}
